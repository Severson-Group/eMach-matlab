function returnParameter = ConstructLinearMotorExample(DRAW_MAGNET,DRAW_TIKZ,DRAW_XFEMM,params,source)

revAngle = 0;

if (DRAW_MAGNET)
    IronMaterial = 'M-19 24 Ga';
    MagnetMaterial1 = 'NdFeB: Neodymium Iron Boron;Type=RadialInCylindrical';
    MagnetMaterial2 = 'NdFeB: Neodymium Iron Boron;Type=Uniform;Direction=[0,-1,0]';
    MagnetMaterial3 = 'NdFeB: Neodymium Iron Boron;Type=RadialOutCylindrical';
    MagnetMaterial1 = 'NdFe35;Type=RadialInCylindrical';
    MagnetMaterial2 = 'NdFe35;Type=Uniform;Direction=[0,-1,0]';
    MagnetMaterial3 = 'NdFe35;Type=RadialOutCylindrical';
    CoilMaterial = 'Copper: 5.77e7 Siemens/meter';
end

if (DRAW_XFEMM)
    IronMaterial = 'M19-24Ga';
    MagnetMaterial1 = 'NdFe35';
    MagnetMaterial2 = 'NdFe35';
    MagnetMaterial3 = 'NdFe35';
    CoilMaterial = 'Coil';
end 

%% Define parameters

% Constant parameters
J = source.J;
coilfillfactor = source.coilfillfactor;
number_of_dups = source.number_of_dups;
wire_cond = source.wire_cond;
f = source.f; 
Pout_des = source.Pout_des;
P_des = source.P_des;
NS = source.NS; % number of slots
np = source.np; % number of pole pairs

% Optimization variables
r_so = params(1);
rsi_rso = params(2);
wst_wst_wss = params(3);
wso_wss = params(4);
wrr_wr = params(5);
drm_drm_g = params(6);
d_ri = params(7);
gap = params(8);
w_s = params(9);
dsy_dri = params(10);
dsp_rso_rsi = params(11);
dso_dsp = params(12);
Bs = params(13);
dre_drm = params(14);

stroke = (4*Pout_des./(P_des*2*pi*f.*Bs.^2)).^(1/3);
tau = w_s/2;
r_si = r_so*rsi_rso;
% Rotor geometric parameters
w_r = w_s;
w_rr = wrr_wr*w_r;
w_ra = tau-w_rr;
d_rm = drm_drm_g/(1-drm_drm_g)*gap;
r_ri = r_si - gap - d_rm - d_ri;
d_re = dre_drm*d_rm;
w_rs = (w_r - w_ra - 2*w_rr)/2;

% Stator geometric parameters
w_st = wst_wst_wss*w_s/2;
w_ss = (w_s-2*w_st)/2;
w_so = wso_wss*w_ss;
d_sy = dsy_dri*d_ri;
d_sp = dsp_rso_rsi*(r_so-r_si);
d_so = dso_dsp*d_sp;
d_st = r_so - r_si - d_sy - d_sp;

% radii of fillets
r_st = 3;
r_sf = 3;
r_sb = 3;

% Notched rectangle parameters based on the mover parameters
w = w_r; % length of rectangle
w_n = (w - w_ra - 2*w_rr)/2; % length of notch
d = r_si - gap - d_rm - r_ri; % height of notched part of rectangle
d_n = d_rm - d_re; % height of notch

% Rotor and stator r and z coordinates
rr1 = r_ri;
rr2 = r_ri + d_ri;
rr3 = r_ri + d_ri + d_rm;
rrnew = rr3-d_re;

rs1 = r_si;
rs2 = r_si + d_so;
rs3 = r_si + d_sp;
rs4 = r_so - d_sy;
rs5 = r_so;

zr1 = 0;
zr2 = w_rs;
zr3 = w_rs + w_rr;
zr4 = w_rs + w_rr + w_ra;
zr5 = w_r - w_rs;
zr6 = w_r;

zs1 = 0;
zs2 = w_st/2;
zs3 = (w_s-2*w_so)/4;
zs4 = zs3+w_so;
zs5 = zs4+zs3-zs2;
zs6 = zs5+w_st;
zs7 = zs6+zs3-zs2;
zs8 = zs7+w_so;
zs9 = zs8+zs3-zs2;
zs10 = zs9+w_st/2;

slot_area = w_ss*d_st + (d_sp - d_so)*0.5*(w_so + w_ss);
slot_area1 = w_ss*d_st;
slot_area2 = (d_sp - d_so)*0.5*(w_so + w_ss);
wire_diam=sqrt(4*coilfillfactor*slot_area/pi);

%% Define cross sections

% Create a cross-section of a stator iron
for i = 1:NS/2
statorIron(i) = CrossSectLinearMotorStator( ...
        'name', ['stator_iron' num2str(i)], ...
        'dim_w_s', DimMillimeter(w_s), ...
        'dim_w_st', DimMillimeter(w_st), ...
        'dim_w_so', DimMillimeter(w_so), ...
        'dim_r_so', DimMillimeter(r_so), ...
        'dim_r_si', DimMillimeter(r_si), ...
        'dim_d_so', DimMillimeter(d_so), ...
        'dim_d_sp', DimMillimeter(d_sp), ...
        'dim_d_sy', DimMillimeter(d_sy), ...
        'dim_r_st', DimMillimeter(r_st), ...
        'dim_r_sf', DimMillimeter(r_sf), ...
        'dim_r_sb', DimMillimeter(r_sb), ...
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([0,-w_s*(i-1)]), ...
            'theta', DimDegree([0]).toRadians() ...
        ) ...
        );
end
 
% Create a cross-section of a mover iron   
for i = 1:np
moverIron(i) = CrossSectNotchedRectangle( ...
        'name', ['mover_iron' num2str(i)], ...
        'dim_w', DimMillimeter(w), ...
        'dim_w_n', DimMillimeter(w_n), ...   
        'dim_d', DimMillimeter(d), ...
        'dim_d_n', DimMillimeter(d_n), ...         
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([r_ri, w-w*(i-1)]), ...
            'theta', DimDegree([-90]).toRadians() ...
        ) ...
        );    
   
% Create a cross-section of the magnets   
magnet1(i) = CrossSectSolidRect( ...
        'name', ['magnet' num2str(i)], ...
        'dim_w',DimMillimeter(d_rm),...
        'dim_h',DimMillimeter(w_rr),...
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([d + r_ri,w - w_n - w_rr - w*(i-1)]), ...
            'theta', DimDegree([0]).toRadians() ...
        ) ...
        );
    
magnet2(i) = CrossSectSolidRect( ...
        'name', ['magnet' num2str(i)], ...
        'dim_w',DimMillimeter(d_rm),...
        'dim_h',DimMillimeter(w_ra),...
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([d + r_ri,w_n + w_rr - w*(i-1)]), ...
            'theta', DimDegree([0]).toRadians() ...
        ) ...
        );    

magnet3(i) = CrossSectSolidRect( ...
        'name', ['magnet' num2str(i)],...
        'dim_w', DimMillimeter(d_rm),...
        'dim_h',DimMillimeter(w_rr),...
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([d + r_ri,w_n - w*(i-1)]), ...
            'theta', DimDegree([0]).toRadians() ...
        ) ...
        );
end

for i = 1:np
moverAirGap(i) = CrossSectNotchedRectangle( ...
        'name', ['mover_air_gap' num2str(i)], ...
        'dim_w', DimMillimeter(w), ...
        'dim_w_n', DimMillimeter(w_rs), ...   
        'dim_d', DimMillimeter(gap/2), ...
        'dim_d_n', DimMillimeter(d_re), ...         
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([r_si-gap/2, -w*(i-1)]), ...
            'theta', DimDegree([90]).toRadians() ...
        ) ...
        );
end

for i = 1:NS/2
statorAirGap(i) = CrossSectSolidRect( ...
        'name', ['stator_air_gap' num2str(i)], ...
        'dim_w',DimMillimeter(gap/2),...
        'dim_h',DimMillimeter(w_s),...
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([r_si-gap/2, -w_s*(i-1)]), ...
            'theta', DimDegree([0]).toRadians() ...
        ) ...
        );   

slotOpening1(i) = CrossSectSolidRect( ...
        'name', ['SlotOpening1' num2str(i)], ...
        'dim_w',DimMillimeter(d_so),...
        'dim_h',DimMillimeter(w_so),...
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([r_si, zs7-w_s*(i-1)]), ...
            'theta', DimDegree([0]).toRadians() ...
        ) ...
        );       
    
slotOpening2(i) = CrossSectSolidRect( ...
        'name', ['SlotOpening2' num2str(i)], ...
        'dim_w',DimMillimeter(d_so),...
        'dim_h',DimMillimeter(w_so),...
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([r_si, zs3-w_s*(i-1)]), ...
            'theta', DimDegree([0]).toRadians() ...
        ) ...
        );

coil11(i) = CrossSectSolidRect( ...
        'name', ['coil1' num2str(i)], ...
        'dim_w',DimMillimeter(d_st),...
        'dim_h',DimMillimeter(w_ss),...
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([rs3,zs6-w_s*(i-1)]), ...
            'theta', DimDegree([0]).toRadians() ...
        ) ...
        );

coil12(i) = CrossSectTrapezoid( ...
        'name', ['coil12' num2str(i)], ...
        'dim_h',DimMillimeter(d_sp-d_so),...
        'dim_w',DimMillimeter(w_ss),...
        'dim_theta',DimDegree(atan((d_sp-d_so)/(zs7-zs6))/pi*180),...
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([rs3,(zs7+zs8)/2-w_s*(i-1)]), ...
            'theta', DimDegree([90]).toRadians() ...
        ) ...
        );    
    
coil21(i) = CrossSectSolidRect( ...
        'name', ['coil2' num2str(i)], ...
        'dim_w',DimMillimeter(d_st),...
        'dim_h',DimMillimeter(w_ss),...
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([rs3,zs2-w_s*(i-1)]), ...
            'theta', DimDegree([0]).toRadians() ...
        ) ...
        );

coil22(i) = CrossSectTrapezoid( ...
        'name', ['coil22' num2str(i)], ...
        'dim_h',DimMillimeter(d_sp-d_so),...
        'dim_w',DimMillimeter(w_ss),...
        'dim_theta',DimDegree(atan((d_sp-d_so)/(zs7-zs6))/pi*180),...
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([rs3,(zs3+zs4)/2-w_s*(i-1)]), ...
            'theta', DimDegree([90]).toRadians() ...
        ) ...
        );     
end
    
%% Define components
for i = 1:NS/2
statorIronComp(i) = Component( ...
        'name', ['StatorIronComp' num2str(i)], ...
        'crossSections', statorIron(i), ...
        'material', MaterialGeneric('name', IronMaterial), ...
        'makeSolid', MakeRevolve( ...
            'location', Location3D( ...
                'anchor_xyz', DimMillimeter([0,0,0]), ...
                'rotate_xyz', DimDegree([0,0,0]).toRadians() ...
                ), ...
            'dim_center', DimMillimeter([0,0]), ...
            'dim_axis', DimMillimeter([0,1]), ...
            'dim_angle', DimDegree(revAngle) ...
        ));  
end

for i = 1:np
moverIronComp(i) = Component( ...
        'name', ['moverIronComp' num2str(i)], ...
        'crossSections', moverIron(i), ...
        'material', MaterialGeneric('name', IronMaterial), ...
        'makeSolid', MakeRevolve( ...
            'location', Location3D( ...
                'anchor_xyz', DimMillimeter([0,0,0]), ...
                'rotate_xyz', DimDegree([0,0,0]).toRadians() ...
                ), ...
            'dim_center', DimMillimeter([0,0]), ...
            'dim_axis', DimMillimeter([0,1]), ...
            'dim_angle', DimDegree(revAngle) ...
        ));  
%         'material', MaterialGeneric('name', [MagnetMaterial ';Type=Radially Inward (Cylindrical);Radial center=[0,0,0];Radial axis=[0,1,0]']), ...
        
magnet1Comp(i) = Component( ...
        'name', ['magnet1Comp' num2str(i)], ...
        'crossSections', magnet1(i), ...
        'material', MaterialGeneric('name', MagnetMaterial1), ...
        'makeSolid', MakeRevolve( ...
            'location', Location3D( ...
                'anchor_xyz', DimMillimeter([0,0,0]), ...
                'rotate_xyz', DimDegree([0,0,0]).toRadians() ...
                ), ...
            'dim_center', DimMillimeter([0,0]), ...
            'dim_axis', DimMillimeter([0,1]), ...
            'dim_angle', DimDegree(revAngle) ...
        ));    
    
magnet2Comp(i) = Component( ...
        'name', ['magnet2Comp' num2str(i)], ...
        'crossSections', magnet2(i), ...
        'material', MaterialGeneric('name', MagnetMaterial2), ...
        'makeSolid', MakeRevolve( ...
            'location', Location3D( ...
                'anchor_xyz', DimMillimeter([0,0,0]), ...
                'rotate_xyz', DimDegree([0,0,0]).toRadians() ...
                ), ...
            'dim_center', DimMillimeter([0,0]), ...
            'dim_axis', DimMillimeter([0,1]), ...
            'dim_angle', DimDegree(revAngle) ...
        ));     

magnet3Comp(i) = Component( ...
        'name', ['magnet3Comp' num2str(i)], ...
        'crossSections', magnet3(i), ...
        'material', MaterialGeneric('name', MagnetMaterial3), ...
        'makeSolid', MakeRevolve( ...
            'location', Location3D( ...
                'anchor_xyz', DimMillimeter([0,0,0]), ...
                'rotate_xyz', DimDegree([0,0,0]).toRadians() ...
                ), ...
            'dim_center', DimMillimeter([0,0]), ...
            'dim_axis', DimMillimeter([0,1]), ...
            'dim_angle', DimDegree(revAngle) ...
        ));
end

for i = 1:np
moverAirGapComp(i) = Component( ...
        'name', ['moverAirGapComp' num2str(i)], ...
        'crossSections', moverAirGap(i), ...
        'material', MaterialGeneric('name', 'AIR'), ...
        'makeSolid', MakeRevolve( ...
            'location', Location3D( ...
                'anchor_xyz', DimMillimeter([0,0,0]), ...
                'rotate_xyz', DimDegree([0,0,0]).toRadians() ...
                ), ...
            'dim_center', DimMillimeter([0,0]), ...
            'dim_axis', DimMillimeter([0,1]), ...
            'dim_angle', DimDegree(revAngle) ...
        ));  
end

for i = 1:NS/2
statorAirGapComp(i) = Component( ...
        'name', ['statorAirGapComp' num2str(i)], ...
        'crossSections', statorAirGap(i), ...
        'material', MaterialGeneric('name', 'AIR'), ...
        'makeSolid', MakeRevolve( ...
            'location', Location3D( ...
                'anchor_xyz', DimMillimeter([0,0,0]), ...
                'rotate_xyz', DimDegree([0,0,0]).toRadians() ...
                ), ...
            'dim_center', DimMillimeter([0,0]), ...
            'dim_axis', DimMillimeter([0,1]), ...
            'dim_angle', DimDegree(revAngle) ...
        ));  
    
slotOpening1Comp(i) = Component( ...
        'name', ['slotOpening1Comp' num2str(i)], ...
        'crossSections', slotOpening1(i), ...
        'material', MaterialGeneric('name', 'AIR'), ...
        'makeSolid', MakeRevolve( ...
            'location', Location3D( ...
                'anchor_xyz', DimMillimeter([0,0,0]), ...
                'rotate_xyz', DimDegree([0,0,0]).toRadians() ...
                ), ...
            'dim_center', DimMillimeter([0,0]), ...
            'dim_axis', DimMillimeter([0,1]), ...
            'dim_angle', DimDegree(revAngle) ...
        ));     
    
slotOpening2Comp(i) = Component( ...
        'name', ['slotOpening2Comp' num2str(i)], ...
        'crossSections', slotOpening2(i), ...
        'material', MaterialGeneric('name', 'AIR'), ...
        'makeSolid', MakeRevolve( ...
            'location', Location3D( ...
                'anchor_xyz', DimMillimeter([0,0,0]), ...
                'rotate_xyz', DimDegree([0,0,0]).toRadians() ...
                ), ...
            'dim_center', DimMillimeter([0,0]), ...
            'dim_axis', DimMillimeter([0,1]), ...
            'dim_angle', DimDegree(revAngle) ...
        ));     
    
coil11Comp(i) = Component( ...
        'name', ['coil11Comp' num2str(i)], ...
        'crossSections', coil11(i), ...
        'material', MaterialGeneric('name', CoilMaterial), ...
        'makeSolid', MakeRevolve( ...
            'location', Location3D( ...
                'anchor_xyz', DimMillimeter([0,0,0]), ...
                'rotate_xyz', DimDegree([0,0,0]).toRadians() ...
                ), ...
            'dim_center', DimMillimeter([0,0]), ...
            'dim_axis', DimMillimeter([0,1]), ...
            'dim_angle', DimDegree(revAngle) ...
        ));     
    
coil12Comp(i) = Component( ...
        'name', ['coil12Comp' num2str(i)], ...
        'crossSections', coil12(i), ...
        'material', MaterialGeneric('name', CoilMaterial), ...
        'makeSolid', MakeRevolve( ...
            'location', Location3D( ...
                'anchor_xyz', DimMillimeter([0,0,0]), ...
                'rotate_xyz', DimDegree([0,0,0]).toRadians() ...
                ), ...
            'dim_center', DimMillimeter([0,0]), ...
            'dim_axis', DimMillimeter([0,1]), ...
            'dim_angle', DimDegree(revAngle) ...
        ));    
    
coil21Comp(i) = Component( ...
        'name', ['coil21Comp' num2str(i)], ...
        'crossSections', coil21(i), ...
        'material', MaterialGeneric('name', CoilMaterial), ...
        'makeSolid', MakeRevolve( ...
            'location', Location3D( ...
                'anchor_xyz', DimMillimeter([0,0,0]), ...
                'rotate_xyz', DimDegree([0,0,0]).toRadians() ...
                ), ...
            'dim_center', DimMillimeter([0,0]), ...
            'dim_axis', DimMillimeter([0,1]), ...
            'dim_angle', DimDegree(revAngle) ...
        ));     
    
coil22Comp(i) = Component( ...
        'name', ['coil22Comp' num2str(i)], ...
        'crossSections', coil22(i), ...
        'material', MaterialGeneric('name', CoilMaterial), ...
        'makeSolid', MakeRevolve( ...
            'location', Location3D( ...
                'anchor_xyz', DimMillimeter([0,0,0]), ...
                'rotate_xyz', DimDegree([0,0,0]).toRadians() ...
                ), ...
            'dim_center', DimMillimeter([0,0]), ...
            'dim_axis', DimMillimeter([0,1]), ...
            'dim_angle', DimDegree(revAngle) ...
        ));    
end
    
%% Draw via MagNet

if (DRAW_MAGNET)
    toolMn = MagNet();
    toolMn.open(0,0,true);
    toolMn.setDefaultLengthUnit('millimeters', false);

    % Create components
    for i = 1:NS/2
        statorIronComp(i).make(toolMn, toolMn); toolMn.viewAll();   
        statorAirGapComp(i).make(toolMn, toolMn); toolMn.viewAll();   
        slotOpening1Comp(i).make(toolMn, toolMn); toolMn.viewAll();
        slotOpening2Comp(i).make(toolMn, toolMn); toolMn.viewAll();
        coil11Comp(i).make(toolMn, toolMn); toolMn.viewAll();
        coil12Comp(i).make(toolMn, toolMn); toolMn.viewAll();
        coil21Comp(i).make(toolMn, toolMn); toolMn.viewAll();
        coil22Comp(i).make(toolMn, toolMn); toolMn.viewAll();        
    end
    
    for i = 1:np
        moverIronComp(i).make(toolMn, toolMn); toolMn.viewAll();
        magnet1Comp(i).make(toolMn, toolMn); toolMn.viewAll();
        magnet2Comp(i).make(toolMn, toolMn); toolMn.viewAll();
        magnet3Comp(i).make(toolMn, toolMn); toolMn.viewAll();
        moverAirGapComp(i).make(toolMn, toolMn); toolMn.viewAll();
    end
    
    toolMn.viewAll();
    
    % Specify magnet directions
    for i = 1:np
        mn_d_setparameter(toolMn.doc, magnet1Comp(i).name, ...
            'MaterialCenter','[0, 0, 0]',...
            get(toolMn.consts,'InfoArrayParameter'));
        mn_d_setparameter(toolMn.doc, magnet1Comp(i).name, ...
            'MaterialAxis','[0, 1, 0]',...
            get(toolMn.consts,'InfoArrayParameter'));
        
        mn_d_setparameter(toolMn.doc, magnet3Comp(i).name, ...
            'MaterialCenter','[0, 0, 0]',...
            get(toolMn.consts,'InfoArrayParameter'));
        mn_d_setparameter(toolMn.doc, magnet3Comp(i).name, ...
            'MaterialAxis','[0, 1, 0]',...
            get(toolMn.consts,'InfoArrayParameter'));
    end
    % Create coils
    coil1 = mn_d_makeSimpleCoil(toolMn.mn, 1, [{['coil21Comp' num2str(1)]},...
        {['coil11Comp' num2str(1)]}]);
%     mn_d_setparameter(toolMn.doc, coil1, 'NumberOfTurns', 1, ...%1.3087
%     get(toolMn.consts,'infoNumberParameter'));
%     mn_d_setparameter(toolMn.doc, coil1, 'StrandArea', slot_area1*source.coilfillfactor*1e-6, ...
%     get(toolMn.consts,'infoNumberParameter'));
    mn_d_setparameter(toolMn.doc, coil1, 'NumberOfTurns', round(slot_area1*source.coilfillfactor/1.3087), ...
    get(toolMn.consts,'infoNumberParameter'));
    mn_d_setparameter(toolMn.doc, coil1, 'StrandArea', 1.3087*1e-6, ...
    get(toolMn.consts,'infoNumberParameter'));

    coil2 = mn_d_makeSimpleCoil(toolMn.mn, 1, [{['coil22Comp' num2str(1)]},...
        {['coil12Comp' num2str(1)]}]);
%     mn_d_setparameter(toolMn.doc, coil2, 'NumberOfTurns', 1, ...
%     get(toolMn.consts,'infoNumberParameter'));
%     mn_d_setparameter(toolMn.doc, coil2, 'StrandArea', slot_area2*source.coilfillfactor*1e-6, ...
%     get(toolMn.consts,'infoNumberParameter'));
    mn_d_setparameter(toolMn.doc, coil2, 'NumberOfTurns', round(slot_area2*source.coilfillfactor/1.3087), ...
    get(toolMn.consts,'infoNumberParameter'));
    mn_d_setparameter(toolMn.doc, coil2, 'StrandArea', 1.3087*1e-6, ...
    get(toolMn.consts,'infoNumberParameter'));

    % Setup mesh
    airgapmes = 0.3;
    moverironmes = 2;
    statorironmes = 2;
    coilmes = 3;
    magnetmes = 1.5;
    slotopeningmes = 1;
    maxmesharea = 4;
    for i = 1:NS/2
        mn_d_setparameter(toolMn.doc, statorIronComp(i).name, 'MaximumElementSize', ...
            sprintf('%g %%mm', statorironmes), ...
            get(toolMn.consts,'infoNumberParameter'));
        mn_d_setparameter(toolMn.doc, slotOpening1Comp(i).name, 'MaximumElementSize', ...
            sprintf('%g %%mm', slotopeningmes), ...
            get(toolMn.consts,'infoNumberParameter'));   
        mn_d_setparameter(toolMn.doc, slotOpening2Comp(i).name, 'MaximumElementSize', ...
            sprintf('%g %%mm', slotopeningmes), ...
            get(toolMn.consts,'infoNumberParameter'));
        mn_d_setparameter(toolMn.doc, coil11Comp(i).name, 'MaximumElementSize', ...
            sprintf('%g %%mm', coilmes), ...
            get(toolMn.consts,'infoNumberParameter')); 
        mn_d_setparameter(toolMn.doc, coil12Comp(i).name, 'MaximumElementSize', ...
            sprintf('%g %%mm', coilmes), ...
            get(toolMn.consts,'infoNumberParameter'));  
        mn_d_setparameter(toolMn.doc, coil21Comp(i).name, 'MaximumElementSize', ...
            sprintf('%g %%mm', coilmes), ...
            get(toolMn.consts,'infoNumberParameter'));  
        mn_d_setparameter(toolMn.doc, coil22Comp(i).name, 'MaximumElementSize', ...
            sprintf('%g %%mm', coilmes), ...
            get(toolMn.consts,'infoNumberParameter'));  
        mn_d_setparameter(toolMn.doc, statorAirGapComp(i).name, 'MaximumElementSize', ...
            sprintf('%g %%mm', airgapmes), ...
            get(toolMn.consts,'infoNumberParameter'));         
    end
    for i = 1:np
        mn_d_setparameter(toolMn.doc, moverIronComp(i).name, 'MaximumElementSize', ...
            sprintf('%g %%mm', moverironmes), ...
            get(toolMn.consts,'infoNumberParameter'));
        mn_d_setparameter(toolMn.doc, magnet1Comp(i).name, 'MaximumElementSize', ...
            sprintf('%g %%mm', magnetmes), ...
            get(toolMn.consts,'infoNumberParameter'));   
        mn_d_setparameter(toolMn.doc, magnet2Comp(i).name, 'MaximumElementSize', ...
            sprintf('%g %%mm', magnetmes), ...
            get(toolMn.consts,'infoNumberParameter'));   
        mn_d_setparameter(toolMn.doc, magnet3Comp(i).name, 'MaximumElementSize', ...
            sprintf('%g %%mm', magnetmes), ...
            get(toolMn.consts,'infoNumberParameter'));
        mn_d_setparameter(toolMn.doc, moverAirGapComp(i).name, 'MaximumElementSize', ...
            sprintf('%g %%mm', airgapmes), ...
            get(toolMn.consts,'infoNumberParameter'));         
    end

	% Set up motion
    motionComponent = mn_d_makeMotionComponent(toolMn.mn,[{'moverIronComp1'},...
        {'moverAirGapComp1'},{'magnet1Comp1'},{'magnet2Comp1'},{'magnet3Comp1'}]);
    mn_d_setparameter(toolMn.doc, motionComponent, 'MotionSourceType','VelocityDriven', ...
    get(toolMn.consts,'InfoStringParameter'));
    mn_d_setparameter(toolMn.doc, motionComponent, 'MotionType','Linear', ...
    get(toolMn.consts,'InfoStringParameter'));
    mn_d_setparameter(toolMn.doc, motionComponent, 'MotionDirection','[0, 1, 0]', ...
    get(toolMn.consts,'InfoArrayParameter'));

end

if (DRAW_XFEMM)
        
    toolXFEMM = XFEMM();
    
    % Create new problem
    toolXFEMM.newFemmProblem(0,'axi','millimeters');
    
    % Add new materials
    Magnet = newmaterial_mfemm(MagnetMaterial1, 'Mu_x', 1.0997785, 'Mu_y', 1.0997785, 'H_c', 890000, 'Sigma', 0.625);
    load('M19_24Ga');
    Iron = newmaterial_mfemm(IronMaterial, 'BHPoints', M19_24Ga, 'Sigma', 1.9);
    Coil = newmaterial_mfemm(CoilMaterial, 'Sigma', wire_cond, 'WireD', wire_diam);
    
    toolXFEMM.addmaterial(Magnet);
    toolXFEMM.addmaterial(Iron);
    toolXFEMM.addmaterial(Coil);
       
    % Create components
    for i = 1:NS/2
        token1(i) = statorIronComp(i).make(toolXFEMM, toolXFEMM);    
    end
    for i = 1:np
        token2(i) = moverIronComp(i).make(toolXFEMM, toolXFEMM);
        token3(i) = magnet1Comp(i).make(toolXFEMM, toolXFEMM);
        token4(i) = magnet2Comp(i).make(toolXFEMM, toolXFEMM);
        token5(i) = magnet3Comp(i).make(toolXFEMM, toolXFEMM); 
    end
    airgapmesharea = 0.4;
    rotorironmesharea = 2;
    statorironmesharea = 2;
    coilmesharea = 3;
    magnetmesharea = 2;
    slotopeningmesharea = 2.5;
    maxmesharea = 4;
    % Set other component parameters: group number (nodes, block labels),
    % maximum mesh area
    for i = 1:NS/2
        toolXFEMM.setCompParameters(token1(i),'groupNumber',1,...
            'maxMeshArea',DimMillimeter(statorironmesharea));
    end
    for i = 1:np
        toolXFEMM.setCompParameters(token2(i),'groupNumber',2,...
            'maxMeshArea',DimMillimeter(rotorironmesharea));
        toolXFEMM.setCompParameters(token3(i),'groupNumber',2,...
            'maxMeshArea',DimMillimeter(magnetmesharea),...
            'magnetDirection',DimDegree(180));
        toolXFEMM.setCompParameters(token4(i),'groupNumber',2,...
            'maxMeshArea',DimMillimeter(magnetmesharea),...
            'magnetDirection',DimDegree(270));
        toolXFEMM.setCompParameters(token5(i),'groupNumber',2,...
            'maxMeshArea',DimMillimeter(magnetmesharea),...
            'magnetDirection',DimDegree(360));
    end
    
    % Draw coil, slot opening, and air-gap regions
    % Slot opening:
    for i = 1:NS/2
        toolXFEMM.drawLine(DimMillimeter([rs2,zs3-(i-1)*w_s]),DimMillimeter([rs2,zs4-(i-1)*w_s]));
        toolXFEMM.drawLine(DimMillimeter([rs2,zs7-(i-1)*w_s]),DimMillimeter([rs2,zs8-(i-1)*w_s]));
        toolXFEMM.drawLine(DimMillimeter([rs1,zs3-(i-1)*w_s]),DimMillimeter([rs1,zs4-(i-1)*w_s]));
        toolXFEMM.drawLine(DimMillimeter([rs1,zs7-(i-1)*w_s]),DimMillimeter([rs1,zs8-(i-1)*w_s]));   
    end
    % Stator air-gap:
    toolXFEMM.drawLine(DimMillimeter([rs1-gap/2,zs1-(np-1)*w_r]),DimMillimeter([rs1-gap/2,zs10]),...
        'groupNumber',2);
    toolXFEMM.drawLine(DimMillimeter([rs1,zs1-(NS/2-1)*w_s]),DimMillimeter([rs1-gap/2,zs1-(np-1)*w_r]));
    toolXFEMM.drawLine(DimMillimeter([rs1,zs10]),DimMillimeter([rs1-gap/2,zr6]));
    % Mover air-gap: 
    toolXFEMM.drawLine(DimMillimeter([rs1-gap/2,zs1-(np-1)*w_r]),DimMillimeter([rrnew,zr1-(np-1)*w_r]),...
        'groupNumber',2);
    toolXFEMM.drawLine(DimMillimeter([rs1-gap/2,zs10]),DimMillimeter([rrnew,zr6]),...
        'groupNumber',2);

    % Draw a boundary and set air region
    dist_center = (w_s*NS/2-w_r*np)/2;
    R = max(np/2*w_r+stroke/2+20,sqrt((max(NS/2,np)/2*max(w_s,w_r))^2+r_so^2)+20);
    BoundaryCenterXY = DimMillimeter([0,-(max(NS/2,np)-2)*max(w_s,w_r)/2-dist_center]);
    BoundaryStartXY = DimMillimeter([0,-R-(max(NS/2,np)-2)*max(w_s,w_r)/2-dist_center]);
    BoundaryEndXY = DimMillimeter([0,R-(max(NS/2,np)-2)*max(w_s,w_r)/2-dist_center]);
    toolXFEMM.drawArc(BoundaryCenterXY,BoundaryStartXY,BoundaryEndXY);
    toolXFEMM.drawLine(BoundaryStartXY,BoundaryEndXY);
    toolXFEMM.addAirRegion(DimMillimeter([rs5+10,(zs1+zs10)/2]),...
        'groupNumber',1,'maxMeshArea',DimMillimeter(maxmesharea));
    for i = 1:NS/2
        toolXFEMM.addAirRegion(DimMillimeter([(rs1+rs2)/2,(zs7+zs8)/2-(i-1)*w_s]),...
            'groupNumber',1,'maxMeshArea',DimMillimeter(slotopeningmesharea));
        toolXFEMM.addAirRegion(DimMillimeter([(rs1+rs2)/2,(zs3+zs4)/2-(i-1)*w_s]),...
            'groupNumber',1,'maxMeshArea',DimMillimeter(slotopeningmesharea));
    end
    toolXFEMM.addAirRegion(DimMillimeter([rs1-gap/4,(zr1+zr6)/2]),...
        'groupNumber',1,'maxMeshArea',DimMillimeter(airgapmesharea));
    toolXFEMM.addAirRegion(DimMillimeter([rr3+gap/4,(zr1+zr6)/2]),...
        'groupNumber',2,'maxMeshArea',DimMillimeter(airgapmesharea)); 
    
    % Remove overlaps
    FemmProblem = toolXFEMM.removeOverlaps();
    
    % Set other parameters (using xfemm's own functions)
    
    % Add circuit
    FemmProblem = addcircuit_mfemm(FemmProblem, 'Circuit 1', ...
        'TotalAmps_re', J*coilfillfactor*slot_area);
    
    % Add coil material
    for i = 1:NS/2
        FemmProblem = addblocklabel_mfemm(FemmProblem, (rs3+rs4)/2, (zs7+zs8)/2-(i-1)*w_s,...
            'BlockType', CoilMaterial, 'InCircuit', 'Circuit 1', 'Turns', 1,...
            'MaxArea',coilmesharea,'InGroup',1);
        FemmProblem = addblocklabel_mfemm(FemmProblem, (rs3+rs4)/2, (zs3+zs4)/2-(i-1)*w_s,...
            'BlockType', CoilMaterial, 'InCircuit', 'Circuit 1', 'Turns', -1,...
            'MaxArea',coilmesharea,'InGroup',1);
    end
    otherParams = 1;
    
    % Center mover and stator
    FemmProblem = translategroups_mfemm(FemmProblem, 2, 0, -dist_center);

end

if DRAW_MAGNET
    returnParameter.toolMn = toolMn;
    returnParameter.coilName.coil1 = coil1;
    returnParameter.coilName.coil2 = coil2;
    returnParameter.slot_area.slot_area1 = slot_area1;
    returnParameter.slot_area.slot_area2 = slot_area2;
    returnParameter.motionComponent = motionComponent;
    returnParameter.stroke = stroke;
elseif DRAW_XFEMM
    returnParameter = FemmProblem;
end

end