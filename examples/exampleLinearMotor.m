clc
clear
close all

DRAW_MAGNET = 0;
DRAW_TIKZ   = 0;
DRAW_XFEMM = 1;

%% Define geometric parameters

% Stator parameters
w_s = 65.7; % stator length
w_st = 14.8; % tooth thickness
w_so = 3.66; % slot opening length
r_so = 71.8; % stator outer radius
r_si = 35.9; % stator inner radius
d_so = 2; % slot opening height
d_sp = 4; % height of tooth end
d_sy = 9.53; % stator yoke thickness
d_st = r_so - r_si - d_sy - d_sp;
w_ss = (w_s - 2*w_st)/2;
% radii of fillets
r_st = 3;
r_sf = 3;
r_sb = 3;

% Mover parameters
g = 1.35; % air gap length
d_rm = 9.82; % magnet thickness
d_re = 6.82; % length between end iron surface and magnet surface
r_ri = 17.6; % mover inner radius
w_ra = 20; % length of axially magnetized magnet
w_rr = 20; % length of radially magnetized magnet
w_r = w_s; % mover length

% Notched rectangle parameters based on the mover parameters
w = w_r; % length of rectangle
w_n = (w - w_ra - 2*w_rr)/2; % length of notch
d = r_si - g - d_rm - r_ri; % height of notched part of rectangle
d_n = d_rm - d_re; % height of notch

%% Define cross sections

% Create a cross-section of a stator iron
statorIron = CrossSectLinearMotorStator( ...
        'name', 'stator_iron', ...
        'dim_w_s', DimMillimeter(w_s), ...
        'dim_w_st', DimMillimeter(w_st), ...
        'dim_w_so', DimMillimeter(w_so), ...
        'dim_r_so', DimMillimeter(r_so), ...
        'dim_r_si', DimMillimeter(r_si), ...
        'dim_d_so', DimMillimeter(d_so), ...
        'dim_d_sp', DimMillimeter(d_sp), ...
        'dim_d_sy', DimMillimeter(d_sy), ...
        'dim_r_st', DimMillimeter(r_st), ...
        'dim_r_sf', DimMillimeter(r_sf), ...
        'dim_r_sb', DimMillimeter(r_sb), ...
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([0,0]), ...
            'theta', DimDegree([0]).toRadians() ...
        ) ...
        );
 
% Create a cross-section of a mover iron    
moverIron = CrossSectNotchedRectangle( ...
        'name', 'mover_iron', ...
        'dim_w', DimMillimeter(w), ...
        'dim_w_n', DimMillimeter(w_n), ...   
        'dim_d', DimMillimeter(d), ...
        'dim_d_n', DimMillimeter(d_n), ...         
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([r_ri, w]), ...
            'theta', DimDegree([-90]).toRadians() ...
        ) ...
        );    
   
% Create a cross-section of the magnets   
magnet1 = CrossSectSolidRect( ...
        'name', 'SolidRect', ...
        'dim_w',DimMillimeter(d_rm),....
        'dim_h',DimMillimeter(w_rr),...
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([d + r_ri,w - w_n - w_rr]), ...
            'theta', DimDegree([0]).toRadians() ...
        ) ...
        );
    
magnet2 = CrossSectSolidRect( ...
        'name', 'SolidRect', ...
        'dim_w',DimMillimeter(d_rm),....
        'dim_h',DimMillimeter(w_ra),...
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([d + r_ri,w_n + w_rr]), ...
            'theta', DimDegree([0]).toRadians() ...
        ) ...
        );    

magnet3 = CrossSectSolidRect( ...
        'name', 'SolidRect', ...
        'dim_w',DimMillimeter(d_rm),....
        'dim_h',DimMillimeter(w_rr),...
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([d + r_ri,w_n]), ...
            'theta', DimDegree([0]).toRadians() ...
        ) ...
        );

coil1 = CrossSectSolidRect( ...
        'name', 'SolidRect', ...
        'dim_w',DimMillimeter(d_st),....
        'dim_h',DimMillimeter(w_ss),...
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([r_si+d_sp,1.5*w_st+w_ss]), ...
            'theta', DimDegree([0]).toRadians() ...
        ) ...
        );
    
coil2 = CrossSectSolidRect( ...
        'name', 'SolidRect', ...
        'dim_w',DimMillimeter(d_st),....
        'dim_h',DimMillimeter(w_ss),...
        'location', Location2D( ...
            'anchor_xy', DimMillimeter([r_si+d_sp,w_st/2]), ...
            'theta', DimDegree([0]).toRadians() ...
        ) ...
        );
    
%% Define components

statorIronComp = Component( ...
        'name', 'StatorIronComp', ...
        'crossSections', statorIron, ...
        'material', MaterialGeneric('name', 'Hiperco-50'), ...
        'makeSolid', MakeRevolve( ...
            'location', Location3D( ...
                'anchor_xyz', DimMillimeter([0,0,0]), ...
                'rotate_xyz', DimDegree([0,0,0]).toRadians() ...
                ), ...
            'dim_center', DimMillimeter([0,0]), ...
            'dim_axis', DimMillimeter([0,1]), ...
            'dim_angle', DimDegree(270) ...
        ));  

moverIronComp = Component( ...
        'name', 'moverIronComp', ...
        'crossSections', moverIron, ...
        'material', MaterialGeneric('name', 'Hiperco-50'), ...
        'makeSolid', MakeRevolve( ...
            'location', Location3D( ...
                'anchor_xyz', DimMillimeter([0,0,0]), ...
                'rotate_xyz', DimDegree([0,0,0]).toRadians() ...
                ), ...
            'dim_center', DimMillimeter([0,0]), ...
            'dim_axis', DimMillimeter([0,1]), ...
            'dim_angle', DimDegree(270) ...
        ));  

magnet1Comp = Component( ...
        'name', 'magnet1Comp', ...
        'crossSections', magnet1, ...
        'material', MaterialGeneric('name', 'NdFeB 37 MGOe'), ...
        'makeSolid', MakeRevolve( ...
            'location', Location3D( ...
                'anchor_xyz', DimMillimeter([0,0,0]), ...
                'rotate_xyz', DimDegree([0,0,0]).toRadians() ...
                ), ...
            'dim_center', DimMillimeter([0,0]), ...
            'dim_axis', DimMillimeter([0,1]), ...
            'dim_angle', DimDegree(270) ...
        ));    
    
magnet2Comp = Component( ...
        'name', 'magnet2Comp', ...
        'crossSections', magnet2, ...
        'material', MaterialGeneric('name', 'NdFeB 37 MGOe'), ...
        'makeSolid', MakeRevolve( ...
            'location', Location3D( ...
                'anchor_xyz', DimMillimeter([0,0,0]), ...
                'rotate_xyz', DimDegree([0,0,0]).toRadians() ...
                ), ...
            'dim_center', DimMillimeter([0,0]), ...
            'dim_axis', DimMillimeter([0,1]), ...
            'dim_angle', DimDegree(270) ...
        ));     

magnet3Comp = Component( ...
        'name', 'magnet3Comp', ...
        'crossSections', magnet3, ...
        'material', MaterialGeneric('name', 'NdFeB 37 MGOe'), ...
        'makeSolid', MakeRevolve( ...
            'location', Location3D( ...
                'anchor_xyz', DimMillimeter([0,0,0]), ...
                'rotate_xyz', DimDegree([0,0,0]).toRadians() ...
                ), ...
            'dim_center', DimMillimeter([0,0]), ...
            'dim_axis', DimMillimeter([0,1]), ...
            'dim_angle', DimDegree(270) ...
        ));

coil1Comp = Component( ...
        'name', 'coil1Comp', ...
        'crossSections', coil1, ...
        'material', MaterialGeneric('name', '16 AWG'), ...
        'makeSolid', MakeRevolve( ...
            'location', Location3D( ...
                'anchor_xyz', DimMillimeter([0,0,0]), ...
                'rotate_xyz', DimDegree([0,0,0]).toRadians() ...
                ), ...
            'dim_center', DimMillimeter([0,0]), ...
            'dim_axis', DimMillimeter([0,1]), ...
            'dim_angle', DimDegree(270) ...
        ));

coil2Comp = Component( ...
        'name', 'coil2Comp', ...
        'crossSections', coil2, ...
        'material', MaterialGeneric('name', '16 AWG'), ...
        'makeSolid', MakeRevolve( ...
            'location', Location3D( ...
                'anchor_xyz', DimMillimeter([0,0,0]), ...
                'rotate_xyz', DimDegree([0,0,0]).toRadians() ...
                ), ...
            'dim_center', DimMillimeter([0,0]), ...
            'dim_axis', DimMillimeter([0,1]), ...
            'dim_angle', DimDegree(270) ...
        ));
    
%% Draw via MagNet

if (DRAW_MAGNET)
    toolMn = MagNet();
    toolMn.open(0,0,true);
    toolMn.setDefaultLengthUnit('millimeters', false);

    statorIronComp.make(toolMn, toolMn);
    moverIronComp.make(toolMn, toolMn);
    magnet1Comp.make(toolMn, toolMn);
    magnet2Comp.make(toolMn, toolMn);
    magnet3Comp.make(toolMn, toolMn);

    toolMn.viewAll();
end

%% Draw via TikZ

if (DRAW_TIKZ)
    toolTikz = TikZ();
    toolTikz.open('output.txt');

    statorIronComp.draw(toolTikz);
    moverIronComp.draw(toolTikz);
    magnet1Comp.draw(toolTikz);
    magnet2Comp.draw(toolTikz);
    magnet3Comp.draw(toolTikz);
    toolTikz.close();
end

if (DRAW_XFEMM)
    toolXFEMM = XFEMM();
    
    % Create new problem
    toolXFEMM.newFemmProblem(0,'axi','millimeters');
    
    % Create components
    token1 = statorIronComp.make(toolXFEMM, toolXFEMM);    
    token2 = moverIronComp.make(toolXFEMM, toolXFEMM);
    token3 = magnet1Comp.make(toolXFEMM, toolXFEMM);
    token4 = magnet2Comp.make(toolXFEMM, toolXFEMM);
    token5 = magnet3Comp.make(toolXFEMM, toolXFEMM);
    token6 = coil1Comp.make(toolXFEMM, toolXFEMM);
    token7 = coil2Comp.make(toolXFEMM, toolXFEMM);  
    
    % Assign group labels to each component
    toolXFEMM.setGroupNumber(1,token1);
    toolXFEMM.setGroupNumber(2,token2);
    toolXFEMM.setGroupNumber(2,token3);
    toolXFEMM.setGroupNumber(2,token4);
    toolXFEMM.setGroupNumber(2,token5);
    toolXFEMM.setGroupNumber(1,token6);
    toolXFEMM.setGroupNumber(1,token7);
    
    % Draw a boundary and set air region
    BoundaryCenterXY = DimMillimeter([0,w_s/2]);
    BoundaryStartXY = DimMillimeter([0,-1.2*sqrt((w_s/2)^2+(r_so)^2)+w_s/2]);
    BoundaryEndXY = DimMillimeter([0,1.2*sqrt((w_s/2)^2+(r_so)^2)+w_s/2]);
    toolXFEMM.drawArc(BoundaryCenterXY,BoundaryStartXY,BoundaryEndXY);
    toolXFEMM.drawLine(BoundaryStartXY,BoundaryEndXY);
    toolXFEMM.addAirRegion(DimMillimeter([r_so+10,w_s/2]));
    
    % Remove overlaps
    FemmProblem = toolXFEMM.removeOverlaps();
    
    % Set other parameters (this is for now, then needs to be changed)
    FemmProblem = addcircuit_mfemm(FemmProblem, 'Circuit 1', 'TotalAmps_re', 12);
    FemmProblem.BlockLabels(6).Turns = 100;
    FemmProblem.BlockLabels(7).Turns = -100;
    FemmProblem.BlockLabels(6).InCircuit = 'Circuit 1';
    FemmProblem.BlockLabels(7).InCircuit = 'Circuit 1';
    FemmProblem.BlockLabels(3).MagDir = 180;
    FemmProblem.BlockLabels(4).MagDir = 270;
    FemmProblem.BlockLabels(5).MagDir = 360;

    % Plot the geometry
    toolXFEMM.plot(FemmProblem);

    % Solve and extract force vs. mover position
    filename = 'exampleLinearMotor.fem';
    stroke = 10; dx = 0.5;
    moverPosition = -stroke/2:dx:stroke/2;
    myfpproc = fpproc();
    FemmProblem = translategroups_mfemm(FemmProblem, 2, 0, stroke/2);
    for i=1:length(moverPosition)
        fprintf('Mover position %i of %i\n',i,length(moverPosition));
        writefemmfile(filename, FemmProblem);
        ansfile = analyse_mfemm(filename);
        myfpproc.opendocument(ansfile);
        myfpproc.groupselectblock(2);
        Force(i) = -myfpproc.blockintegral(19);
        FemmProblem = translategroups_mfemm(FemmProblem, 2, 0, -dx);
    end
    
    % Plot results
    figure
    plot(moverPosition,Force,'Linewidth',3)
    ylabel('Force (N)'); xlabel('Mover position (mm)');
    ylim([0 600]);
    
end